name: Build and Deploy RAN Articles Search

on:
  # Автоматический деплой каждый день в 6:00 UTC (после синхронизации статей)
  schedule:
    - cron: '0 6 * * *'
  
  # Ручной запуск
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild of search index'
        required: false
        default: 'false'
        type: boolean

  # При push в main (для разработки)
  push:
    branches: [ main ]
    paths:
      - 'scripts/**'
      - 'assets/**'
      - 'index.html'
      - '.github/workflows/deploy.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install google-cloud-storage
          
      - name: Install jq for JSON parsing
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          
      - name: Setup Node.js (for Lunr.js)
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Download Lunr.js
        run: |
          mkdir -p assets/js
          curl -L -o assets/js/lunr.min.js https://cdn.jsdelivr.net/npm/lunr@2.3.9/lunr.min.js
          
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          
      - name: Generate search index and data
        run: |
          python scripts/build_index.py
        env:
          GCS_BUCKET_NAME: 'journals-ran'
          OUTPUT_DIR: 'data'
          
      - name: Verify generated files
        run: |
          ls -la data/
          echo "Articles file size:"
          wc -l data/articles.json || echo "No articles file"
          echo "Index file size:"
          ls -lh data/search-index.json || echo "No index file"
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Build site
        run: |
          # Создаем структуру сайта
          mkdir -p _site
          
          # Копируем основные файлы
          cp index.html _site/
          cp -r assets _site/
          cp -r data _site/
          
          # Создаем robots.txt
          echo "User-agent: *
          Allow: /
          Sitemap: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/sitemap.xml" > _site/robots.txt
          
          # Копируем sitemap если есть
          [ -f sitemap.xml ] && cp sitemap.xml _site/ || echo "No sitemap generated"
          
          echo "Site built successfully"
          ls -la _site/
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Post-deployment verification
        run: |
          echo "🚀 Deployment completed!"
          echo "📊 Site statistics:"
          if [ -f data/articles.json ]; then
            echo "   📚 Articles: $(cat data/articles.json | jq -r '.stats.total_articles // "unknown"')"
            echo "   🏛️ Journals: $(cat data/articles.json | jq -r '.stats.total_journals // "unknown"')"
            echo "   📅 Last updated: $(cat data/articles.json | jq -r '.stats.last_updated // "unknown"')"
          else
            echo "   ⚠️ Could not read statistics"
          fi
          
      - name: Create deployment summary
        run: |
          echo "## 🎉 RAN Articles Search Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Deployment successful!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Statistics:**" >> $GITHUB_STEP_SUMMARY
          
          if [ -f data/articles.json ]; then
            ARTICLES=$(cat data/articles.json | jq -r '.stats.total_articles // "unknown"')
            JOURNALS=$(cat data/articles.json | jq -r '.stats.total_journals // "unknown"')
            UPDATED=$(cat data/articles.json | jq -r '.stats.last_updated // "unknown"')
            echo "- 📚 Articles indexed: **${ARTICLES}**" >> $GITHUB_STEP_SUMMARY
            echo "- 🏛️ Journals: **${JOURNALS}**" >> $GITHUB_STEP_SUMMARY
            echo "- 📅 Last updated: **${UPDATED}**" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ Could not read statistics" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Access the site:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The RAN Articles Search deployment encountered an error." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs above for details." >> $GITHUB_STEP_SUMMARY